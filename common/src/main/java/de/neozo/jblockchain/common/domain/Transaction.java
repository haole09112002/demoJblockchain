package de.neozo.jblockchain.common.domain;




import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.ArrayUtils;

import com.google.common.primitives.Longs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class Transaction {

    /**
     * Unique identifier which can be generated by hashing text, senderHash, signature and timestamp
     */
    private byte[] hashID;

    /**
     * Value of this transaction
     */
    private float value;

    /**
     * The hash of the address which is responsible for this Transaction
     */
    private byte[] senderHash;

    /**
     * Signature of text which can be verified with publicKey of sender address
     */
    private byte[] signature;
    private byte[] receiverHash;
    private List<TransactionInput> txInputs = new ArrayList<>();
    private List<TransactionOutput> txOutputs = new ArrayList<>();
    /**
     * Creation time of this Transaction
     */
    private long timestamp;

    public Transaction() {
    }

    public Transaction(byte[] from, byte[] to, float value) {
		this.senderHash = from;
		this.receiverHash = to;
		this.value = value;
		this.timestamp =System.currentTimeMillis();
	}
    public void createCoinBase(byte[] receiverHash) {
    	this.receiverHash = receiverHash;
    	this.value = 1000f;
    	this.timestamp = System.currentTimeMillis();
    	this.hashID = calculateHash();
    	txOutputs.add(new TransactionOutput(receiverHash,value,hashID));
    }
    public boolean CheckCoinBase() {
    	return this.txInputs == null 
    			&& this.senderHash == null;
    }
    public void processTransaction(List<TransactionOutput> outputs) {
    	for (TransactionOutput transactionOutput : outputs) {
			this.txInputs.add(new TransactionInput(transactionOutput));
		}
    	float leftOver = InputsValue() - value;
    	txOutputs.add(new TransactionOutput(receiverHash, value, hashID));
    	if(leftOver > 0) {
    		txOutputs.add(new TransactionOutput(senderHash, leftOver, hashID));
    	}
    }
    
    public byte[] getHashID() {
		return hashID;
	}

	public void setHashID(byte[] hashID) {
		this.hashID = hashID;
	}

	public byte[] getSenderHash() {
        return senderHash;
    }

    public void setSenderHash(byte[] senderHash) {
        this.senderHash = senderHash;
    }

    public byte[] getSignature() {
        return signature;
    }

    public void setSignature(byte[] signature) {
        this.signature = signature;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    public float getValue() {
		return value;
	}

	public void setValue(float value) {
		this.value = value;
	}

	public byte[] getReceiverHash() {
		return receiverHash;
	}

	public void setReceiverHash(byte[] receiverHash) {
		this.receiverHash = receiverHash;
	}

	public List<TransactionInput> getTxInputs() {
		return txInputs;
	}

	public void setTxInputs(List<TransactionInput> txInputs) {
		this.txInputs = txInputs;
	}

	public List<TransactionOutput> getTxOutputs() {
		return txOutputs;
	}

	public void setTxOutputs(List<TransactionOutput> txOutputs) {
		this.txOutputs = txOutputs;
	}
	public String DataString() {
		String data = Base64.encodeBase64String(senderHash) + Base64.encodeBase64String(receiverHash) +Float.toString(value)
		+Long.toString(timestamp);
		return data;
	}
	public float InputsValue() {
		float total = 0;
		for(TransactionInput i : txInputs) {
			if(i.UTXO == null) continue; 
			total += i.UTXO.value;
		}
		return total;
	}
	/**
     * Calculates the hash using relevant fields of this type
     * @return SHA256-hash as raw bytes
     */
	public byte[] calculateHash() {
        byte[] hashableData = ArrayUtils.addAll(receiverHash, senderHash);
        hashableData = ArrayUtils.addAll(hashableData, signature);
        hashableData = ArrayUtils.addAll(hashableData, Longs.toByteArray(timestamp));
        return DigestUtils.sha256(hashableData);
    }

	@Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Transaction that = (Transaction) o;

        return Arrays.equals(hashID, that.hashID);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(hashID);
    }

}